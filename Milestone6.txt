Milestones1
started from milestone 1, I was quite familar witt minesweeper.
Determing what the rules are and outline the program.

Milestones2
creating a board method and revealCell were not easy back then. 
I'm not used to the 2d array ideas. I always had to draw out the mines in a real paper.
And put system.out.println() in the loop to see what is going on.

Milestones4
This Cascading reveals was the hardest part of the whole project.
Just getting the idea of recurrsion is already difficult. 
Figuring out what the base cases were and thinking of the error checking took me countless hours.
The program kept showing stackoverflow error and index out of bound.
Hence I had to put system.out.println() to see waht was the value got out of bound and why it could not hit the base case.

Milestone5
Modifying the code to fit MsGUI was not an easy task.
I was confused about what each method shuld do. 
It would be nice if the professor went through the MsGUI.
I don't know how I got these code worked. 
I did not know the relationship between getValue method and the board that displays to users.
But once I noticed I changed something on getValue method. The board changed.
That was the point that I started to know what was going on here.

Milestone6
The random mine placement was quite easy. By using the Math.Rnadom method from 1 to 50,
numbers could be gernerated from 1 to 50. 
And, I'd love to have random total mines so player can't count the mines as a trick.
Thus, I say if the random number is between 1 to 40, it places nothing. If it is between 40 to 50,
it places a mine. This gives you a 20% chance of getting a mine.
And, the documemtation was a bit confusing, too. I don't know what to write.

Efficiency analysis
A.
Board method
1. 
constructor
2. 
the size of the array. 
how many arrays
3.
initialize variables.
4.
o(n)
5.
Best case and Worst case are the same.
It does not matter how the configuration. Same amout of operations are still required.
6.
Big-O(n)

B.
flagCell method
1.
flag a cell
2.
always 1
3.
change of the boolean value.
4.
o(1)
5.
Best case and worst case are the same since it only check the value and change it.
6.
Big-O(1)

C.
isFlagged method
1.
get the value of the boolean array
2.
always 1
3.
get value
4.
o(1)
5.
Best case and worst case are the same since it only gets value.
6.
Big-O(1)

D.
getHeight method
1.
get the height of the array.
2.
always 1
3.
get value
4.
o(1)
5.
Best case and worst case are the same since it only gets value.
6.
Big-O(1)

E.
getWidth method
1.
get the width of the array.
2.
always 1
3.
get value
4.
o(1)
5.
Best case and worst case are the same since it only gets value.
6.
Big-O(1)

F.
getValue method
1.
this method determines what to show to the user through MsGUI
2.
the size of the array.
3.
number of comparisons
counter 
swaps
4.
o(8n)
5.
Best case and worst case are the same since it's always going to have the same operations.
6.
Big-O(n)

G.
revealCell method
1. 
reveal the cell. if the cell was blank, keep rvealing it until it's out of bound or reach numbers.
2.
the size of the array.
3.
number of comparisons
4.
o(W*D-4)
5.
Best case 
when revealCell method only has to reveal one cell without recurrsively revealving surrounding cells.
Worst case
only one mines are placed in the map, revealCell has to do the recurrsion.
6.
Big-O(n^2)

F.
unflagCell
1.
change the value of the boolean array
2.
always 1
3.
change the value 
4.
o(1)
5.
Best case and worst case are the same since it always only does one thing.
6.
Big-O(1)


